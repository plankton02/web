{"ast":null,"code":"var _jsxFileName = \"/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './abi'; //nft\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.getWeb3 = () => new Promise(resolve => {\n      window.addEventListener('load', () => {\n        let currentWeb3;\n\n        if (window.ethereum) {\n          currentWeb3 = new Web3(window.ethereum);\n\n          try {\n            // Request account access if needed\n            window.ethereum.enable(); // Acccounts now exposed\n\n            resolve(currentWeb3);\n          } catch (error) {\n            // User denied account access...\n            alert('Please allow access for the app to work');\n          }\n        } else if (window.web3) {\n          window.web3 = new Web3(web3.currentProvider); // Acccounts always exposed\n\n          resolve(currentWeb3);\n        } else {\n          console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n      });\n    });\n\n    this.contractAddress = '0x743B0f7FccE1c41661A0118F2cF37Cd500FcdC05';\n  }\n\n  connectMetamask() {\n    getWeb3().then(res => {\n      this.web3 = res;\n      this.contractInstance = new this.web3.eth.Contract(contractAbi, this.contractAddress);\n      this.web3.eth.getAccounts().then(accounts => {\n        [this.account] = accounts;\n      }).catch(err => {\n        console.log(err, 'err!!');\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Edit \", /*#__PURE__*/_jsxDEV(\"code\", {\n            children: \"src/App.js\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 18\n          }, this), \" and save to reload.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.connectMetamask(),\n          className: \"button is-outlined is-small is-danger\",\n          children: \"Buy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js"],"names":["Web3","contractAbi","App","Component","constructor","getWeb3","Promise","resolve","window","addEventListener","currentWeb3","ethereum","enable","error","alert","web3","currentProvider","console","log","contractAddress","connectMetamask","then","res","contractInstance","eth","Contract","getAccounts","accounts","account","catch","err","render","logo"],"mappings":";;AACA,OAAO,WAAP;AACA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,OAAxB,C,CAAiC;;;;AAGjC,MAAMC,GAAN,SAAkBC,SAAlB,CAA4B;AAC1BC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAOdC,OAPc,GAOJ,MAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AACvCC,MAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AACpC,YAAIC,WAAJ;;AAEA,YAAIF,MAAM,CAACG,QAAX,EAAqB;AACnBD,UAAAA,WAAW,GAAG,IAAIV,IAAJ,CAASQ,MAAM,CAACG,QAAhB,CAAd;;AACA,cAAI;AACF;AACAH,YAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB,GAFE,CAGF;;AACAL,YAAAA,OAAO,CAACG,WAAD,CAAP;AACD,WALD,CAKE,OAAOG,KAAP,EAAc;AACd;AACAC,YAAAA,KAAK,CAAC,yCAAD,CAAL;AACD;AACF,SAXD,MAWO,IAAIN,MAAM,CAACO,IAAX,EAAiB;AACtBP,UAAAA,MAAM,CAACO,IAAP,GAAc,IAAIf,IAAJ,CAASe,IAAI,CAACC,eAAd,CAAd,CADsB,CAEtB;;AACAT,UAAAA,OAAO,CAACG,WAAD,CAAP;AACD,SAJM,MAIA;AACLO,UAAAA,OAAO,CAACC,GAAR,CAAY,qEAAZ;AACD;AACF,OArBD;AAsBD,KAvBe,CAPF;;AAGd,SAAKC,eAAL,GAAuB,4CAAvB;AAEC;;AA2BDC,EAAAA,eAAe,GAAE;AACff,IAAAA,OAAO,GAAGgB,IAAV,CAAgBC,GAAD,IAAS;AACtB,WAAKP,IAAL,GAAYO,GAAZ;AACA,WAAKC,gBAAL,GAAwB,IAAI,KAAKR,IAAL,CAAUS,GAAV,CAAcC,QAAlB,CAA2BxB,WAA3B,EAAwC,KAAKkB,eAA7C,CAAxB;AACA,WAAKJ,IAAL,CAAUS,GAAV,CAAcE,WAAd,GAA4BL,IAA5B,CAAkCM,QAAD,IAAc;AAC7C,SAAC,KAAKC,OAAN,IAAiBD,QAAjB;AACD,OAFD,EAEGE,KAFH,CAEUC,GAAD,IAAS;AAChBb,QAAAA,OAAO,CAACC,GAAR,CAAYY,GAAZ,EAAiB,OAAjB;AACD,OAJD;AAKD,KARD;AASD;;AAEDC,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAAA,gCACE;AAAK,UAAA,GAAG,EAAEC,IAAV;AAAgB,UAAA,SAAS,EAAC,UAA1B;AAAqC,UAAA,GAAG,EAAC;AAAzC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,2CACO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADP;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAKE;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKZ,eAAL,EAAvB;AAAgD,UAAA,SAAS,EAAC,uCAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AA3DyB;;AA8D5B,eAAelB,GAAf","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './abi'; //nft\n\n\nclass App extends Component {\n  constructor() {\n    super();\n  \n  this.contractAddress = '0x743B0f7FccE1c41661A0118F2cF37Cd500FcdC05';\n\n  }\n\n  getWeb3 = () => new Promise((resolve) => {\n    window.addEventListener('load', () => {\n      let currentWeb3;\n  \n      if (window.ethereum) {\n        currentWeb3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(currentWeb3);\n        } catch (error) {\n          // User denied account access...\n          alert('Please allow access for the app to work');\n        }\n      } else if (window.web3) {\n        window.web3 = new Web3(web3.currentProvider);\n        // Acccounts always exposed\n        resolve(currentWeb3);\n      } else {\n        console.log('Non-Ethereum browser detected. You should consider trying MetaMask!');\n      }\n    });\n  });\n\n  connectMetamask(){\n    getWeb3().then((res) => {\n      this.web3 = res;\n      this.contractInstance = new this.web3.eth.Contract(contractAbi, this.contractAddress);\n      this.web3.eth.getAccounts().then((accounts) => {\n        [this.account] = accounts;\n      }).catch((err) => {\n        console.log(err, 'err!!');\n      });\n    });\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <button onClick={() => this.connectMetamask() } className=\"button is-outlined is-small is-danger\">\n                        Buy\n          </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}