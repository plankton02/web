{"ast":null,"code":"var _jsxFileName = \"/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './Tokens/abi'; //nft\n\nimport React, { Component } from 'react';\nimport ConnectBtn from './Components/ConnectBtn';\nimport LockToken from './Components/LockToken';\nimport UnlockToken from './Components/UnlockToken';\nimport Web3Modal from \"web3modal\"; //import ConnectButton from \"./Components/ConnectButton\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLocked: false,\n      web3: null,\n      provider: null,\n      connected: true,\n      address: '',\n      chainId: 1,\n      networkId: 1\n    };\n    const providerOptions = {\n      /* See Provider Options Section */\n    };\n    this.web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      // optional\n      cacheProvider: true,\n      // optional\n      providerOptions // required\n\n    });\n    this.connectMetamask = this.connectMetamask.bind(this);\n    this.lockToken = this.lockToken.bind(this);\n    this.unlockToken = this.unlockToken.bind(this);\n    this.isTokenLocked = this.isTokenLocked.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n  componentDidUpdate() {}\n\n  async getProvider() {\n    const provider = null;\n    this.web3Modal.connect().then(res => {\n      provider = res;\n    }).catch(err => {// todo\n    });\n    return provider;\n  }\n\n  async onConnect() {\n    const provider = await this.getProvider(); // call subscribeProvider    \n\n    const web3 = this.initWeb3();\n    const address = await this.getAccount();\n    const networkId = await web3.eth.net.getId();\n    const chainId = await web3.eth.chainId();\n    this.setState({\n      web3: web3,\n      provider: provider,\n      connected: true,\n      address: address,\n      chainId: chainId,\n      networkId: networkId\n    });\n    await this.getAccountAssets();\n  }\n\n  initWeb3() {\n    const web3 = new Web3(this.provider);\n    web3.eth.extend({\n      methods: [{\n        name: \"chainId\",\n        call: \"eth_chainId\",\n        outputFormatter: web3.utils.hexToNumber\n      }]\n    });\n    return web3;\n  }\n\n  subscribeProvider() {} // old\n\n\n  connectMetamask() {\n    this.onConnect().then(res => {\n      this.provider = res;\n      this.web3 = new Web3(this.provider);\n      this.contractAddress = '0x984593222E93D8140DD7A515e947E9806d01D085';\n      this.contractInstance = new this.web3.eth.Contract(contractAbi, this.contractAddress); // retreive account info\n\n      this.getAccount().then(res => {\n        this.account = res;\n        this.setState({\n          isConnected: true\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  async getAccount(web3) {\n    const accounts = null;\n    web3.eth.getAccounts().then(res => {\n      accounts = res;\n    }).catch(err => {});\n    return accounts[0];\n  }\n\n  isTokenLocked() {\n    this.contractInstance.methods.isLocked().call({\n      from: this.account\n    }).then(receipt => {\n      console.log(receipt);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  lockToken() {\n    this.contractInstance.methods.lock().send({\n      from: this.account\n    }).then(receipt => {\n      console.log(receipt);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  unlockToken() {\n    this.contractInstance.methods.unlock().send({\n      from: this.account\n    }).then(receipt => {\n      console.log(receipt);\n      this.setState({\n        isConnected: false\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n\n  disconnectMetamask() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" Text: \", this.state.isConnected]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), !this.state.isConnected ? /*#__PURE__*/_jsxDEV(ConnectBtn, {\n          connectMetamask: this.connectMetamask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 38\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Logged in\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LockToken, {\n          lockToken: this.lockToken,\n          isTokenLocked: this.isTokenLocked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UnlockToken, {\n          unlockToken: this.unlockToken,\n          isTokenLocked: this.isTokenLocked\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js"],"names":["Web3","contractAbi","React","Component","ConnectBtn","LockToken","UnlockToken","Web3Modal","App","constructor","props","state","isLocked","web3","provider","connected","address","chainId","networkId","providerOptions","web3Modal","network","cacheProvider","connectMetamask","bind","lockToken","unlockToken","isTokenLocked","componentDidMount","cachedProvider","onConnect","componentDidUpdate","getProvider","connect","then","res","catch","err","initWeb3","getAccount","eth","net","getId","setState","getAccountAssets","extend","methods","name","call","outputFormatter","utils","hexToNumber","subscribeProvider","contractAddress","contractInstance","Contract","account","isConnected","console","log","accounts","getAccounts","from","receipt","lock","send","unlock","disconnectMetamask","render","logo"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './Tokens/abi'; //nft\nimport React, { Component } from 'react';\nimport ConnectBtn from './Components/ConnectBtn';\nimport LockToken from './Components/LockToken';\nimport UnlockToken from './Components/UnlockToken';\nimport Web3Modal from \"web3modal\";\n//import ConnectButton from \"./Components/ConnectButton\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLocked: false,\n      web3: null,\n      provider: null,\n      connected: true,\n      address: '',\n      chainId: 1,\n      networkId: 1\n    };\n\n    const providerOptions = {\n      /* See Provider Options Section */\n    };\n\n    this.web3Modal = new Web3Modal({\n      network: \"mainnet\", // optional\n      cacheProvider: true, // optional\n      providerOptions // required\n    });\n\n    this.connectMetamask = this.connectMetamask.bind(this);\n    this.lockToken = this.lockToken.bind(this);\n    this.unlockToken = this.unlockToken.bind(this);\n    this.isTokenLocked = this.isTokenLocked.bind(this);\n  }\n\n  componentDidMount(){\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n  componentDidUpdate(){\n\n  }\n\n  async getProvider() {\n    const provider = null;\n    this.web3Modal.connect().then((res) => {\n      provider = res;\n    }).catch((err) => {\n// todo\n    });\n\n    return provider;\n  }\n\n  async onConnect () {\n    const provider = await this.getProvider();\n    // call subscribeProvider    \n    const web3 = this.initWeb3();\n\n    const address = await this.getAccount();\n\n    const networkId = await web3.eth.net.getId();\n\n    const chainId = await web3.eth.chainId();\n\n    this.setState({\n      web3: web3,\n      provider: provider,\n      connected: true,\n      address: address,\n      chainId: chainId,\n      networkId: networkId\n    });\n    await this.getAccountAssets();\n\n  }\n\n  initWeb3(){\n    const web3 = new Web3(this.provider);\n    \n    web3.eth.extend({\n      methods: [\n        {\n          name: \"chainId\",\n          call: \"eth_chainId\",\n          outputFormatter: web3.utils.hexToNumber\n        }\n      ]\n    });\n    \n    return web3;\n  }\n\n  subscribeProvider(){\n\n  }\n// old\n  connectMetamask() {\n    this.onConnect().then((res) => {\n      this.provider = res\n      this.web3 = new Web3(this.provider);\n      this.contractAddress = '0x984593222E93D8140DD7A515e947E9806d01D085';\n      this.contractInstance = new this.web3.eth.Contract(contractAbi, this.contractAddress);\n      // retreive account info\n      this.getAccount().then((res) => {\n        this.account = res;\n        this.setState({isConnected: true});\n      }).catch((err) => {\n        console.log(err)\n      });\n\n    }).catch((err) => {\n      console.log(err)\n    });\n  }\n\n  async getAccount(web3) {\n    const accounts = null;\n    web3.eth.getAccounts().then((res) => {\n      accounts = res;\n    }).catch((err) =>{\n\n    });\n    return accounts[0];\n  }\n\n  isTokenLocked() {\n    this.contractInstance.methods.isLocked().call({\n      from: this.account,\n    }).then((receipt) => {\n      console.log(receipt);\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  lockToken() {\n    this.contractInstance.methods.lock().send({\n      from: this.account,\n    }).then((receipt) => {\n      console.log(receipt);\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  unlockToken() {\n    this.contractInstance.methods.unlock().send({\n      from: this.account,\n    }).then((receipt) => {\n      console.log(receipt);\n      this.setState({isConnected: false});\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n  \n\n  disconnectMetamask(){\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div> Text: {this.state.isConnected}</div>\n          {!this.state.isConnected ? <ConnectBtn \n            connectMetamask={this.connectMetamask}/>\n          : <div>Logged in</div>}\n          <LockToken \n            lockToken={this.lockToken}\n            isTokenLocked={this.isTokenLocked}/>\n          <UnlockToken \n            unlockToken={this.unlockToken}\n            isTokenLocked={this.isTokenLocked}/>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}