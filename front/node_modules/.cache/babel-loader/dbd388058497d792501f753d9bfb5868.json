{"ast":null,"code":"var _jsxFileName = \"/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './Tokens/abi'; //nft\n\nimport React, { Component } from 'react';\nimport ConnectBtn from './Components/ConnectBtn';\nimport LockToken from './Components/LockToken';\nimport UnlockToken from './Components/UnlockToken';\nimport Web3Modal from \"web3modal\"; //import ConnectButton from \"./Components/ConnectButton\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isConnected: false,\n      isLocked: false,\n      contractInstance: null,\n      account: null,\n      isLoading: false,\n      chainId: 97,\n      //bsc testnet\n      networkId: '0x61',\n      //bsc testnet\n      contractAddress: '0xa4a8d3E5A436EE537c83f83c9b70E91242e7a8D7',\n      isWrongNetworkDisplay: false\n    };\n    const providerOptions = {};\n    this.web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      // optional\n      cacheProvider: true,\n      // optional\n      providerOptions // required\n\n    });\n    this.connectMetamask = this.connectMetamask.bind(this);\n    this.lockToken = this.lockToken.bind(this);\n    this.unlockToken = this.unlockToken.bind(this);\n    this.isTokenLocked = this.isTokenLocked.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n  componentDidUpdate() {}\n\n  async onConnect() {\n    // get metamask provider\n    this.web3Modal.connect().then(res => {\n      if (window.ethereum) {\n        this.provider = window.ethereum;\n      } else if (window.web3) {\n        this.provider = window.web3.currentProvider;\n      } else {\n        this.provider = new Web3.providers.HttpProvider('http://localhost:8545');\n      }\n\n      this.subscribeProvider(); // creste web3 with current provider\n\n      this.web3 = new Web3(this.provider); // retreive account info\n\n      this.web3.eth.getAccounts().then(res => {\n        // create contract instance\n        const contract = new this.web3.eth.Contract(contractAbi, this.state.contractAddress);\n        const networkId = this.web3.eth.net.getId();\n        const chainId = this.web3.eth.getChainId();\n        this.checkNetworkChain(networkId, chainId);\n        this.setState({\n          account: res[0],\n          contractInstance: contract,\n          isConnected: true\n        });\n      }).catch(err => {\n        console.log(\"err getAccount: \" + err);\n      });\n    }).catch(err => {\n      console.log(\"err web3Modal.connect: \" + err);\n    });\n  }\n\n  isTokenLocked() {\n    this.state.contractInstance.methods.isLocked().call({\n      from: this.state.account\n    }).then(receipt => {\n      console.log(\"isTokenLocked receipt: \" + receipt);\n    }).catch(err => {\n      console.log(\"isTokenLocked err: \" + err);\n    });\n  }\n\n  lockToken() {\n    this.state.contractInstance.methods.lock().send({\n      from: this.state.account\n    }).then(receipt => {\n      console.log(\"lockToken receipt: \" + receipt);\n      this.setState({\n        isLocked: true\n      });\n    }).catch(err => {\n      console.log(\"lockToken err: \" + err);\n    });\n  }\n\n  unlockToken() {\n    this.state.contractInstance.methods.unlock().send({\n      from: this.state.account\n    }).then(receipt => {\n      this.setState({\n        isLocked: false\n      });\n      console.log(\"unlockToken receipt: \" + receipt);\n    }).catch(err => {\n      console.log(\"unlockToken err: \" + err);\n    });\n  }\n\n  connectMetamask() {\n    this.onConnect();\n  }\n\n  async subscribeProvider() {\n    if (!this.provider.on) {\n      return;\n    }\n\n    this.provider.on(\"accountsChanged\", async accounts => {\n      await this.setState({\n        account: accounts[0]\n      });\n    });\n    this.provider.on(\"chainChanged\").then(res => {\n      console.log(res);\n    }); // //, async (chainId) => {\n    //   const networkId = await this.web3.eth.net.getId();\n    //   //this.checkNetworkChain(networkId, chainId);\n    // }).then((res) => {\n    //   console.log(res)\n    // });\n\n    this.provider.on(\"networkChanged\", async networkId => {\n      const chainId = await this.web3.eth.getChainId(); //this.checkNetworkChain(networkId, chainId);\n    });\n  }\n\n  checkNetworkChain(networkId, chainId) {\n    if ((networkId != this.state.networkId || chainId != this.state.chainId) && !this.state.isWrongNetworkDisplay) {\n      console.log(networkId);\n      console.log(\"cnetworkId: \" + networkId + \"  snetworkId: \" + this.state.networkId + \"  cchainId: \" + chainId + \"  schainId: \" + this.state.chainId);\n      alert(\"Please connect to BSC Chain!\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" Text: \", this.state.isConnected]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), !this.state.isConnected ? /*#__PURE__*/_jsxDEV(ConnectBtn, {\n          connectMetamask: this.connectMetamask\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 38\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Logged as \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 25\n          }, this), this.state.account]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), !this.state.isLocked ? /*#__PURE__*/_jsxDEV(LockToken, {\n          lockToken: this.lockToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 16\n        }, this) : /*#__PURE__*/_jsxDEV(UnlockToken, {\n          unlockToken: this.unlockToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => this.isTokenLocked(),\n          className: \"button is-outlined is-small is-danger\",\n          children: \"Check Token\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js"],"names":["Web3","contractAbi","React","Component","ConnectBtn","LockToken","UnlockToken","Web3Modal","App","constructor","props","state","isConnected","isLocked","contractInstance","account","isLoading","chainId","networkId","contractAddress","isWrongNetworkDisplay","providerOptions","web3Modal","network","cacheProvider","connectMetamask","bind","lockToken","unlockToken","isTokenLocked","componentDidMount","cachedProvider","onConnect","componentDidUpdate","connect","then","res","window","ethereum","provider","web3","currentProvider","providers","HttpProvider","subscribeProvider","eth","getAccounts","contract","Contract","net","getId","getChainId","checkNetworkChain","setState","catch","err","console","log","methods","call","from","receipt","lock","send","unlock","on","accounts","alert","render","logo"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './Tokens/abi'; //nft\nimport React, { Component } from 'react';\nimport ConnectBtn from './Components/ConnectBtn';\nimport LockToken from './Components/LockToken';\nimport UnlockToken from './Components/UnlockToken';\nimport Web3Modal from \"web3modal\";\n\n//import ConnectButton from \"./Components/ConnectButton\";\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isConnected: false,\n      isLocked: false,\n      contractInstance: null,\n      account: null,\n      isLoading: false,\n      chainId: 97, //bsc testnet\n      networkId: '0x61', //bsc testnet\n      contractAddress: '0xa4a8d3E5A436EE537c83f83c9b70E91242e7a8D7',\n      isWrongNetworkDisplay: false\n    };\n\n    const providerOptions = {\n    };\n\n    this.web3Modal = new Web3Modal({\n      network: \"mainnet\", // optional\n      cacheProvider: true, // optional\n      providerOptions // required\n    });\n\n    this.connectMetamask = this.connectMetamask.bind(this);\n    this.lockToken = this.lockToken.bind(this);\n    this.unlockToken = this.unlockToken.bind(this);\n    this.isTokenLocked = this.isTokenLocked.bind(this);\n\n  }\n\n  componentDidMount(){\n    if (this.web3Modal.cachedProvider) {\n      this.onConnect();\n    }\n  }\n\n  componentDidUpdate(){\n\n  }\n\n  async onConnect () {\n    // get metamask provider\n    this.web3Modal.connect().then((res) => {\n      if (window.ethereum){\n        this.provider = window.ethereum;\n      } else if (window.web3){\n        this.provider = window.web3.currentProvider\n      } else {\n        this.provider = new Web3.providers.HttpProvider('http://localhost:8545');\n      }\n      \n      this.subscribeProvider();\n\n      // creste web3 with current provider\n      this.web3 = new Web3(this.provider);\n\n      // retreive account info\n      this.web3.eth.getAccounts().then((res) => {\n\n        // create contract instance\n        const contract = new this.web3.eth.Contract(contractAbi, this.state.contractAddress);\n        \n        const networkId = this.web3.eth.net.getId();\n        const chainId = this.web3.eth.getChainId();\n        this.checkNetworkChain(networkId, chainId);\n\n        this.setState({\n          account: res[0],\n          contractInstance: contract,\n          isConnected: true\n        });\n\n      }).catch((err) => {\n        console.log(\"err getAccount: \" + err);  \n      });\n    }).catch((err) => {\n      console.log(\"err web3Modal.connect: \" + err);\n    });\n}\n\n  isTokenLocked() {\n    this.state.contractInstance.methods.isLocked().call({\n      from: this.state.account,\n    }).then((receipt) => {\n      console.log(\"isTokenLocked receipt: \" + receipt);\n    }).catch((err) => {\n      console.log(\"isTokenLocked err: \" + err);\n    });\n  }\n\n  lockToken() {\n    this.state.contractInstance.methods.lock().send({\n      from: this.state.account,\n    }).then((receipt) => {\n      console.log(\"lockToken receipt: \" + receipt);\n      this.setState({isLocked: true});\n    }).catch((err) => {\n      console.log(\"lockToken err: \" + err);\n    });\n  }\n\n  unlockToken() {\n    this.state.contractInstance.methods.unlock().send({\n      from: this.state.account,\n    }).then((receipt) => {\n      this.setState({isLocked: false});\n      console.log(\"unlockToken receipt: \" + receipt);\n    }).catch((err) => {\n      console.log(\"unlockToken err: \" + err);\n    });\n  }\n\n  connectMetamask() {\n    this.onConnect();\n  }\n\n  async subscribeProvider () {\n    if (!this.provider.on) {\n      return;\n    }\n\n    this.provider.on(\"accountsChanged\", async (accounts) => {\n      await this.setState({ account: accounts[0] });\n    });\n\n    this.provider.on(\"chainChanged\").then((res) => {\n      console.log(res);\n    })\n    // //, async (chainId) => {\n    //   const networkId = await this.web3.eth.net.getId();\n    //   //this.checkNetworkChain(networkId, chainId);\n    // }).then((res) => {\n    //   console.log(res)\n    // });\n\n    this.provider.on(\"networkChanged\", async (networkId) => {\n      const chainId = await this.web3.eth.getChainId();\n      //this.checkNetworkChain(networkId, chainId);\n    });\n  }\n\n  checkNetworkChain(networkId, chainId){\n    if((networkId != this.state.networkId || chainId != this.state.chainId) \n        && !this.state.isWrongNetworkDisplay){\n          console.log(networkId)\n      console.log(\"cnetworkId: \" + networkId + \"  snetworkId: \" + this.state.networkId +\"  cchainId: \" + chainId + \"  schainId: \" + this.state.chainId);\n      alert(\"Please connect to BSC Chain!\");\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div> Text: {this.state.isConnected}</div>\n          {!this.state.isConnected ? <ConnectBtn \n            connectMetamask={this.connectMetamask}/>\n          : <div>\n              Logged as <br />\n              {this.state.account}\n            </div>\n          }\n          \n          {\n            !this.state.isLocked \n            ?  <LockToken \n                lockToken={this.lockToken}/>\n            : <UnlockToken \n                unlockToken={this.unlockToken}/> \n          }\n            <br></br>\n            <button onClick={() => this.isTokenLocked() } className=\"button is-outlined is-small is-danger\">\n              Check Token\n            </button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}