{"ast":null,"code":"var _jsxFileName = \"/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js\";\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './abi'; //nft\n\nimport React, { Component } from 'react';\nimport MenuBar from './Components/MenuBar';\nimport Web3Modal from \"web3modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.account = null;\n    this.state = {\n      isConnected: false\n    };\n    const providerOptions = {\n      /* See Provider Options Section */\n    };\n    this.web3Modal = new Web3Modal({\n      network: \"mainnet\",\n      // optional\n      cacheProvider: true,\n      // optional\n      providerOptions // required\n\n    });\n    this.provider = null;\n    this.onConnect().then(res => {\n      this.provider = res;\n    }).catch(err => {\n      console.log(err);\n    }); //const web3 = new Web3(this.provider);\n    // this.connectMetamask = this.connectMetamask.bind(this);\n    // this.disconnectMetamask = this.disconnectMetamask.bind(this);\n    // this.setupWeb3UI = this.setupWeb3UI.bind(this);\n    //this.contractAddress = '0x743B0f7FccE1c41661A0118F2cF37Cd500FcdC05';\n    // this.setupWeb3UI();\n    // console.log(window.ethereum.isConnected() +\":\" +  this.state.isConnected)\n  }\n\n  async onConnect() {\n    const provider = null;\n\n    try {\n      provider = await this.web3Modal.connect();\n    } catch (error) {\n      console.log(error);\n    }\n\n    return provider;\n  }\n\n  connectMetamask() {\n    if (window.ethereum) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(res => {\n        this.setupWeb3UI();\n        console.log(\"connectedToMetamask\");\n        this.account = res;\n        console.log(this.account);\n        this.setupWeb3();\n      }).catch(err => {\n        console.log(err);\n        console.log(\"user denied connectedToMetamask\");\n      });\n    } else {// TODO alert\n    }\n  }\n\n  setupWeb3UI() {\n    if (window.ethereum.isConnected() && !this.state.isConnected) {\n      // T T T,T F T, F T F, F F F \n      this.setState({\n        isConnected: !this.state.isConnected\n      });\n    } else if (!window.ethereum.isConnected() && this.state.isConnected) {\n      this.setState({\n        isConnected: !this.state.isConnected\n      });\n    } else if (!window.ethereum.isConnected() && !this.state.isConnected) {\n      this.setState({\n        isConnected: this.state.isConnected\n      });\n    }\n  }\n\n  setupWeb3() {\n    if (window.ethereum) {\n      this.web3Provider = window.ethereum;\n    } // Legacy dapp browsers...\n    // else if (window.web3) {\n    //   this.web3Provider = window.web3.currentProvider;\n    // }\n    // If no injected web3 instance is detected, fall back to Ganache\n    else {\n        this.web3Provider = new Web3.providers.HttpProvider('http://localhost:8545');\n      }\n\n    this.web3 = new Web3(this.web3Provider);\n    this.contractInstance = new this.web3.eth.Contract(contractAbi, this.contractAddress); // this.web3.eth.getAccounts().then((accounts) => {\n    //     [this.account] = accounts;\n    //   });\n  }\n\n  disconnectMetamask() {\n    // ({method: 'disconnect'\n    // }).then((res) => {\n    //   this.setState({isConnected: false});\n    //   console.log(res);\n    // }).catch((err) =>{\n    //   console.log(err);\n    // });\n    this.setState({\n      isConnected: !this.state.isConnected\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"App-header\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/killua/workspaces/slurpee-finance/pkub-app/front/src/App.js"],"names":["Web3","contractAbi","React","Component","MenuBar","Web3Modal","App","constructor","props","account","state","isConnected","providerOptions","web3Modal","network","cacheProvider","provider","onConnect","then","res","catch","err","console","log","connect","error","connectMetamask","window","ethereum","request","method","setupWeb3UI","setupWeb3","setState","web3Provider","providers","HttpProvider","web3","contractInstance","eth","Contract","contractAddress","disconnectMetamask","render","logo"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport Web3 from 'web3';\nimport contractAbi from './abi'; //nft\nimport React, { Component } from 'react';\nimport MenuBar from './Components/MenuBar';\nimport Web3Modal from \"web3modal\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.account = null;\n\n    this.state = {\n      isConnected: false\n    };\n\n    const providerOptions = {\n      /* See Provider Options Section */\n    };\n\n    this.web3Modal = new Web3Modal({\n      network: \"mainnet\", // optional\n      cacheProvider: true, // optional\n      providerOptions // required\n    });\n\n    this.provider = null;\n\n    this.onConnect()\n    .then((res) => {\n      this.provider = res\n    }).catch((err) => {\n      console.log(err)\n    });\n\n    //const web3 = new Web3(this.provider);\n\n    // this.connectMetamask = this.connectMetamask.bind(this);\n    // this.disconnectMetamask = this.disconnectMetamask.bind(this);\n    // this.setupWeb3UI = this.setupWeb3UI.bind(this);\n\n    //this.contractAddress = '0x743B0f7FccE1c41661A0118F2cF37Cd500FcdC05';\n    // this.setupWeb3UI();\n    // console.log(window.ethereum.isConnected() +\":\" +  this.state.isConnected)\n\n  }\n\n  async onConnect () {\n    const provider = null;\n    try {\n      provider = await this.web3Modal.connect();\n    } catch (error) {\n      console.log(error);\n    }\n    return provider;\n  }\n\n  connectMetamask() {\n    if (window.ethereum) {\n      window.ethereum.request({ method: 'eth_requestAccounts' \n      }).then((res) => {\n        this.setupWeb3UI();\n        console.log(\"connectedToMetamask\");\n        this.account = res;\n        console.log(this.account);\n        this.setupWeb3();\n      }).catch((err) => {\n        console.log(err)\n        console.log(\"user denied connectedToMetamask\")\n      });    \n    } else {\n      // TODO alert\n    }\n  }\n\n  setupWeb3UI(){\n    if(window.ethereum.isConnected() && !this.state.isConnected){ // T T T,T F T, F T F, F F F \n      this.setState({isConnected: !this.state.isConnected});\n    } else if(!window.ethereum.isConnected() && this.state.isConnected) {\n      this.setState({isConnected: !this.state.isConnected});\n    } else if(!window.ethereum.isConnected() && !this.state.isConnected) {\n      this.setState({isConnected: this.state.isConnected});\n    }\n\n  }\n\n  setupWeb3(){\n  if (window.ethereum) {\n    this.web3Provider = window.ethereum;\n  }\n  // Legacy dapp browsers...\n  // else if (window.web3) {\n  //   this.web3Provider = window.web3.currentProvider;\n  // }\n  // If no injected web3 instance is detected, fall back to Ganache\n  else {\n    this.web3Provider = new Web3.providers.HttpProvider('http://localhost:8545');\n  }\n  this.web3 = new Web3(this.web3Provider);\n  this.contractInstance = new this.web3.eth.Contract(contractAbi, this.contractAddress);\n  // this.web3.eth.getAccounts().then((accounts) => {\n  //     [this.account] = accounts;\n  //   });\n  }\n\n  disconnectMetamask(){\n    // ({method: 'disconnect'\n    // }).then((res) => {\n    //   this.setState({isConnected: false});\n    //   console.log(res);\n    // }).catch((err) =>{\n    //   console.log(err);\n    // });\n    this.setState({isConnected: !this.state.isConnected});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          {/* <MenuBar \n          connectMetamask={this.connectMetamask} \n          disconnectMetamask={this.disconnectMetamask} \n          isConnected={this.state.isConnected} /> */}\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}